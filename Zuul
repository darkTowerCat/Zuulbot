#!/usr/bin/python3
import re
import yaml
import psycopg2
import rocketbot
from datetime import datetime

MY_USERNAME = 'zb'
DBHOST = 'db.cecs.pdx.edu'
DBNAME = 'zuul'
UNAME = 'zuul'

#connect to db
conn=psycopg2.connect("host={} dbname={} user={}".format(DBHOST, DBNAME, UNAME))

#this will perform basic database operations
cur = conn.cursor()

# Zuul Bot Class
# interacts with users and databases to record purchases
class ZuulBot(rocketbot.WebsocketRocketBot):
    # Override the handle_message method to do our own thing.
    def handle_chat_message(self, message):
        conn.rollback()
        input_json=message
        token = input_json['token']
        text = input_json['text']
        user_name = input_json['user_name']
        if user_name == 'irc':
            return
        if not re.search('^(?i)zb\s', text):
            self.logger.debug('Quiting')
            return
        #parse data
        recieved_string = input_json['text']
        recieved_string = recieved_string.lower()
        split_string = recieved_string.split( )

        #call correct function
        if split_string[1] == 'menu' or split_string[1] == 'li' or split_string[1] == 'list':
            #view menu
            self.items_list()
            return
        elif split_string[1] == 'buy':
            #buy items
            try:
                if split_string[3] == 'as':
                    self.buy(split_string[4],split_string[2])
                    return
            except IndexError:
                self.buy(user_name,split_string[2])
                return
        elif split_string[1] == 'balance' or split_string[1] == 'bal' or split_string[1] == 'check':
            #balance check
            try:
                if split_string[2] == 'as':
                    self.balance_check(split_string[3])
                    return
                    
            except IndexError:
                self.balance_check(user_name)
                return
        elif split_string[1] == 'create':
            #add account
            self.create_account(user_name)
            return
        elif split_string[1] == 'add':
            #add money
            try:
                if split_string[3] == 'as':
                    self.add(split_string[2], split_string[4])
                    return
            except IndexError:
                self.add(split_string[2], user_name)
                return
        elif split_string[1] == 'find':
            #add account
            self.find(split_string[2])
            return
        else:
            self.respond('''Zuulbot can assist you with the following commands:
        zb menu - displays a list of items
        zb buy item - will buy an item, ie zb buy muffin will buy a muffin
        zb bal - will show available balance
        zb find will match an item to buy and the price (it will not change your account balance)
        buy or bal can also be used for another, ie zb buy muffin as darkTower)
        zb create - will create an account for you
        zb add - will add amount (add a negative amount with \"-amount\")
        please pm darkTower with issues or features with ZuulBot
        ''')

        self.respond('{} try typing your instruction again.'.format(user_name))
        bot_mention = "@{}".format(self.user)
        self.logger.info("Incoming message: {}".format(message))
        if message["text"].lower().startswith(bot_mention):
            self.respond("Hi, @" + message["user_name"])

    def items_list(self):
        cur.execute("SELECT * FROM items")
        items = cur.fetchall()
        object_list = []
        for item in items:
            object_list.append('{}\t\t{}'.format(item[0], item[1]))
        self.respond("\n".join(object_list))

       # respond(json.dumps(items))

    #display balance
    def balance_check(self, user_name):
        command = 'SELECT balance FROM accounts WHERE lower(name)=lower(\'{}\')'.format(user_name)
        cur.execute(command)
        amount = cur.fetchone()
        if amount == None:
            error = '{}\'s account was not found. The name may be mis-spelled or account may need to be made: type \"zb create\".'.format(user_name)
            description = 'balance check with no account'
            record = 'INSERT INTO transactions (time, name, action, command) VALUES (\'now\', %s,\'ERROR\', %s)'
            cur.execute(record, (user_name, description))
            conn.commit()
            self.respond(error)
        else:
            money = '{}'.format(amount[0])
            money = "{} has a current balance of ${}".format(user_name, money)
            description = 'balance check'
            current_balance = self.record_balance(user_name)
            record = 'INSERT INTO transactions (time, name, action, command, balance) VALUES (\'now\', %s,\'BAL\', %s, %s)'
            cur.execute(record, (user_name, description, current_balance))
            conn.commit()
            self.respond(money)

    def bought(self, user_name, item):
        command = 'SELECT balance FROM accounts WHERE lower(name)=lower(%s)'
        cur.execute(command,(user_name,))
        amount = cur.fetchone()
        if amount == None:
            error = '{}\'s account was not found. The name may be mis-spelled or account may need to be made: type \"zb create\".'.format(user_name)
            description = 'attempted to buy {} with no account'.format(item)
            record = 'INSERT INTO transactions (time, name, action, command) VALUES (\'now\', %s,\'ERROR\', %s)'
            cur.execute(record, (user_name, description))
            conn.commit()
            self.respond(error)
        else:
            money = '${:,.2f}'.format(amount[0])
            description = 'bought {}'.format(item)
            self.respond("@{} bought {}, with a remainder balance of {}".format(user_name, item, money))

    def record_balance(self, user_name):
        command = 'SELECT balance FROM accounts WHERE lower(name)=lower(%s)'
        cur.execute(command,(user_name,))
        amount = cur.fetchone()
        if amount == None:
            error = '{}\'s account was not found. The name may be mis-spelled or account may need to be made: type \"zb create\".'.format(user_name)
            self.respond(error)
        else:
            money = '${:,.2f}'.format(amount[0])
            return money

    #create account
    def create_account(self, user_name):
        command = 'SELECT COUNT(name) FROM accounts WHERE lower(name)=lower(%s)'
        cur.execute(command,(user_name,))
        is_unique = cur.fetchone()
        if is_unique[0] == 0:
            command = 'INSERT INTO accounts VALUES (%s, 0)'
            cur.execute(command, (user_name,))
            description = 'account created'
            record = 'INSERT INTO transactions (time, name, action, command) VALUES (\'now\', %s,\'CREATE\', %s)'
            cur.execute(record, (user_name, description))
            conn.commit()
            self.respond('Account created {}'.format(user_name))
        else:
            description = 'attempted to created existing account'
            record = 'INSERT INTO transactions (time, name, action, command) VALUES (\'now\', %s,\'ERROR\', %s)'
            cur.execute(record, (user_name, description))
            conn.commit()
            self.respond('{} an account with that name exists.'.format(user_name))

    #check shortcut list
    def check_item(self, item):
        equivalent = {
                'can':'Canned Beverage',
                'candy':'Candybar',
                'chew':'Fruit Chews',
                'rage':'Canned Beverage',
                'monster':'Monster',
                'mons':'Monster',
                'prem':'Premium Nature Valley',
                'zz':'personal pizza',
                'pok':'pocky',
                'pock':'pocky',
                'chips':'Chips',
                'bake':'chicken bake',
                'pring':'pringles',
                'nn':'Canned Beverage',
                'uffi':'muffin',
                'ffin':'muffin',
                'muff':'muffin',
                'zap':'Chips',
                'ned':'Canned Beverage',
                'rice':'Rice Krispies Bar',
                }
        if item in equivalent:
            return equivalent[item]
        else:
            return None

    #purchase item
    def buy(self, user_name,item):
        #check for exact match
        command = 'SELECT price, name FROM items where lower(name)=lower(%s)'
        cur.execute(command, (item,))
        price = cur.fetchone()
        if price:
            #if exact match is found buy item
            command = 'UPDATE accounts SET balance = (balance - %s) WHERE lower(name)=lower(%s)'
            cur.execute(command, (price[0],user_name))
            description = 'bought {}'.format(item[0])
            current_balance = self.record_balance(user_name)
            record = 'INSERT INTO transactions (time, name, action, amount, command, balance) VALUES (\'now\', %s,\'BUY\', %s, %s, %s)'
            cur.execute(record,(user_name, price[0], description, current_balance))
            conn.commit()
            self.bought(user_name, price[1])
        else:
            #if exact match does not exist, check for specific-use shortcuts,
            #then buy the item with a recursive call using buy()
            change_to = self.check_item(item)
            if change_to != None:
                self.buy(user_name, (change_to,))
            else:
                #if not able to match, will give a suggestion to user
                command = 'SELECT name, price, position(lower(%s) in lower(name)) as pos, levenshtein(lower(name), lower(%s)) as distance from items order by pos desc, distance limit 1'
                cur.execute(command, (item, item))
                none_found = cur.fetchone()
                if none_found:
                    #if exact match is found buy item
                    command = 'UPDATE accounts SET balance = (balance - %s) WHERE lower(name)=lower(%s)'
                    cur.execute(command, (none_found[1],user_name))
                    description = 'requested {} and bought {}'.format(item, none_found[0])
                    current_balance = self.record_balance(user_name)
                    record = 'INSERT INTO transactions (time, name, action, amount, command, balance) VALUES (\'now\', %s,\'BUY\', %s, %s, %s)'
                    cur.execute(record, (user_name, none_found[1], description, current_balance))
                    conn.commit()
                    self.bought(user_name, none_found[0])
                else:
                    self.respond("I don't know that you want " + user_name + ".")

    #modify balance
    def add(self, amount,user_name):
        try:
            cost = float(amount)
            cost = round(cost,2)
        except ValueError:
            self.respond("{} this is an invalid amount.".format(user_name))
        else:
            if cost == abs(cost) > 200:
                self.respond("{} this is an invalid amount.".format(user_name))
            amount = str(cost)

            #command = 'UPDATE accounts SET balance = ((SELECT balance FROM accounts WHERE lower(name)=lower(%s)) + %s) WHERE lower(name)=lower(%s)'
            command = 'UPDATE accounts SET balance = balance + %s WHERE lower(name)=lower(%s)'
            cur.execute(command, (amount, user_name))
            current_balance = self.record_balance(user_name)
            description = 'add {} to account'.format(amount)
            record = 'INSERT INTO transactions (time, name, action, amount, command, balance) VALUES (\'now\', %s, \'ADD\', %s, %s, %s)'
            cur.execute(record,(user_name, amount, description, current_balance))
            conn.commit()
            self.balance_check(user_name)
    
    #find item
    def find(self, item):
        #check for exact match
        command = 'SELECT price, name FROM items where lower(name)=lower(%s)'
        cur.execute(command, (item,))
        price = cur.fetchone()
        if price:
            #if exact match is found 
            money = '${:,.2f}'.format(price[0])

            self.respond("You found {}! It is {}".format(price[1], money))
        else:
            #if exact match does not exist, check for specific-use shortcuts,
            change_to = self.check_item(item)
            if change_to != None:
                self.find((change_to,))
            else:
                #if not able to match, will give a suggestion to user
                command = 'SELECT name, price, position(lower(%s) in lower(name)) as pos, levenshtein(lower(name), lower(%s)) as distance from items order by pos desc, distance limit 1'
                cur.execute(command, (item, item))
                none_found = cur.fetchone()
                if none_found:
                    money = '${:,.2f}'.format(none_found[1])
                    self.respond("You found {}! It is {}".format(none_found[0], money))
                else:
                    self.respond("I don't know that you want.")

# Main Method
if __name__ == "__main__":
    # Pull config from a config file
    with open("rb.cfg", 'r') as cfg_file:
        cfg = yaml.load(cfg_file)
        domain = cfg["domain"]
        user = cfg["user"]
        password = cfg["password"]

    # Create the bot
    bot = ZuulBot(domain, user, password)

    # Make the bot run
    bot.start()
